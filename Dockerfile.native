# ==========================================
# Etapa 1: Build Native Image with GraalVM
# ==========================================
FROM ghcr.io/graalvm/native-image-community:21-ol9 AS build

WORKDIR /build

# Install Maven
RUN microdnf install -y findutils

# Download and install Maven
RUN curl -fsSL https://archive.apache.org/dist/maven/maven-3/3.9.9/binaries/apache-maven-3.9.9-bin.tar.gz | tar xzf - -C /opt && \
    ln -s /opt/apache-maven-3.9.9 /opt/maven && \
    ln -s /opt/maven/bin/mvn /usr/bin/mvn

# Copy Maven wrapper and pom.xml
COPY pom.xml .
COPY mvnw .
COPY .mvn .mvn

# Make mvnw executable
RUN chmod +x mvnw

# Download dependencies (this layer will be cached)
RUN ./mvnw dependency:go-offline -B

# Copy source code
COPY src src

# Build native image
# Using Maven native-image plugin with AOT processing
RUN ./mvnw -Pnative native:compile -DskipTests

# ==========================================
# Etapa 2: Runtime - Ubuntu minimal con librerías necesarias
# ==========================================
FROM ubuntu:22.04

WORKDIR /app

# Instalar solo las librerías necesarias para el ejecutable nativo
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    ca-certificates \
    libz1 \
    && rm -rf /var/lib/apt/lists/*

# Crear usuario no-root para seguridad
RUN groupadd -r appgroup && useradd -r -g appgroup appuser

# Copiar el ejecutable nativo desde la etapa de build
COPY --from=build /build/target/ghosty /app/ghosty

# Dar permisos de ejecución
RUN chmod +x /app/ghosty && \
    chown -R appuser:appgroup /app

# Cambiar a usuario no-root
USER appuser

# Exponer puerto
EXPOSE 8080

# Variable de entorno para perfil de Spring
ENV SPRING_PROFILES_ACTIVE=prod

# Ejecutar el binario nativo
ENTRYPOINT ["/app/ghosty"]
