# ==========================================
# Etapa 1: Build Native Image with GraalVM
# ==========================================
FROM ghcr.io/graalvm/native-image-community:21-ol9 AS build

WORKDIR /build

# Install Maven
RUN microdnf install -y findutils

# Download and install Maven
RUN curl -fsSL https://archive.apache.org/dist/maven/maven-3/3.9.9/binaries/apache-maven-3.9.9-bin.tar.gz | tar xzf - -C /opt && \
    ln -s /opt/apache-maven-3.9.9 /opt/maven && \
    ln -s /opt/maven/bin/mvn /usr/bin/mvn

# Copy Maven wrapper and pom.xml
COPY pom.xml .
COPY mvnw .
COPY .mvn .mvn

# Make mvnw executable
RUN chmod +x mvnw

# Download dependencies (this layer will be cached)
RUN ./mvnw dependency:go-offline -B

# Copy source code
COPY src src

# Build native image
# Using Maven native-image plugin with AOT processing
RUN ./mvnw -Pnative native:compile -DskipTests

# ==========================================
# Etapa 2: Runtime - Minimal Alpine Linux
# ==========================================
FROM cgr.dev/chainguard/glibc-dynamic:latest

WORKDIR /app

# Create user for security
USER nonroot:nonroot

# Copy the native executable from the build stage
COPY --from=build --chown=nonroot:nonroot /build/target/ghosty /app/ghosty

# Expose port
EXPOSE 8080

# Environment variable for Spring profile
ENV SPRING_PROFILES_ACTIVE=prod



# Run the native executable
ENTRYPOINT ["/app/ghosty"]
